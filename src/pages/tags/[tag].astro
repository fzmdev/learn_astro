---
import BlogPost from "../../components/BlogPost.astro"
import BaseLayout from "../../layouts/BaseLayout.astro"

export async function getStaticPaths() {
  // 1. 获取所有博客
  const allPosts = await Astro.glob("../posts/*.md")

  // 2. 构建页面路由
  // 2.1 提取页面所有的tag, 并去重
  const uniqueTagList = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ]

  // 2.2 动态构建路由
  const res = uniqueTagList.map((tag) => {

    // 
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag)
    )

    return {
      params: { tag },
      props: { posts: filteredPosts },
    }
  })

  console.log(res)

  return res

  // 写死路由
  // return [
  //   { params: { tag: "astro" }, props: { posts: allPosts } },
  //   { params: { tag: "successes" }, props: { posts: allPosts } },
  //   { params: { tag: "community" }, props: { posts: allPosts } },
  //   { params: { tag: "blogging" }, props: { posts: allPosts } },
  //   { params: { tag: "setbacks" }, props: { posts: allPosts } },
  //   { params: { tag: "learning in public" }, props: { posts: allPosts } },
  // ]
}

// 从路由对象中解构出来数据
const { tag } = Astro.params
const { posts } = Astro.props

// 3. 过滤出包含指定tag的文章
// const filteredPosts = posts.filter((post) =>
//   post.frontmatter.tags.includes(tag)
// )
---

<BaseLayout pageTitle={tag}>
  <p>包含「{tag}」标签的文章</p>
  <ul>
    <!-- 4. 循环渲染文章 -->
    {
      posts.map((post) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
